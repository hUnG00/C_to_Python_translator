//Khai báo thư viện
#include <conio.h>
#include <stdio.h>
#include <stdlib.h>
//Khai báo cau truc
struct QNODE
{
	int info;
	QNODE *next;
};
struct QUEUE
{
	QNODE *head;
	QNODE *tail;
};
//Khoi tao
QNODE* createNode(int x)
{
	QNODE *p;
	p = new QNODE;
	if(p==NULL)
	{
		printf("Khong du bo nho");
		exit(0);
	}
	p->info = x;
	p->next = NULL;
	return p;
}
void createQueue(QUEUE &q)
{
	q.head = NULL;
	q.tail = NULL;
}
int isEmpty(QUEUE &q)
{
	if(q.head == NULL)
		return 1;
	else
	{
		return 0;
	}
}
int addQNode(QUEUE &q, QNODE *p)
{
	if(p==NULL)
		return 0;
	if(isEmpty(q) == 1)
	{
		q.head = p ;
		q.tail = p;
	}
	else
	{
		q.tail->next = p;
		q.tail=p;
	}
	return 1;
}
void menu()
{
	printf("\n-------------------------------------");
	printf("\n1. Nhap xuat hang doi, them phan tu hang doi  ");
	printf("\n2. Xem phan tu dau hang doi ");
	printf("\n3. Xoa 1 phan tu trong hang doi");
	printf("\n4. ");
	
	printf("\n-------------------------------------");

}
// Khai bao Prototype

void inputQueueRandom(QUEUE &q);
void outputQueueRandom(QUEUE &q);
int getHead(QUEUE q, int &x);
int remove1SNode(QUEUE &q);
//ham main
void main()
{
	QNODE *p;
	QUEUE q;
	int chon,x,y;
	menu();
	do
	{
		printf("\nChon phim chuc nang: ");
		scanf("%d", &chon);
		switch (chon)
		{
		case 1:
			inputQueueRandom(q);
			outputQueueRandom(q);
			printf("\nNhap gia tri can them vao hang doi: ");
			scanf("%d", &x);
			p=createNode(x);
			addQNode(q,p);
			outputQueueRandom(q);
			break;
		case 2:
			inputQueueRandom(q);
			outputQueueRandom(q);
			if(getHead(q,x)==1)
				printf("\nXem phan tu dau hang doi %d", x);
			break;
		case 3:
			inputQueueRandom(q);
			outputQueueRandom(q);
			x=q.head->info;
			if(remove1SNode(q)==1)
				printf("\nXoa phan tu trong hang doi %d", x);
			outputQueueRandom(q);
			break;
		case 4:
			
			break;
		
		}
	}while(chon!=0);

}

//Than ham con
////void deleteList(LIST &l)
////{
////	NODE *p;
////	while (l.head !=NULL)
////	{
////		p = l.head;
////		l.head = l.head->next; // p di chuyển sang node kế bên
////		delete p;
////
////	}
int remove1SNode(QUEUE &q)
{
	int x;
	if(isEmpty(q)==1)
		return 0;
	QNODE *p=q.head;
	q.head = q.head->next;
	if(q.head == NULL)
		q.tail = NULL;
	x=p->info;
	delete p;
	return 1;

}
int getHead(QUEUE q, int &x)
{
	if(isEmpty(q)==1)
		return 0;
	x=q.head->info;
	return 1;
}
void outputQueueRandom(QUEUE &q)
{
	if(isEmpty(q) ==1)
	{
		printf("Hang doi rong ");
		return;
	}
	printf("\nXuat Hang Doi \n");
	//for(int i=0; i<n; i++)
	for(QNODE *p=q.head; p!=NULL; p=p->next)
	{
		printf("%d\t",p->info);
	}

}
void inputQueueRandom(QUEUE &q)
{
	int x, n;
	printf("\nNhap so phan tu hang doi: ");
	scanf("%d", &n);
	createQueue(q);
	for(int i=0; i<n; i++)
	{
		x=rand()%30;
		QNODE* p;
		p=createNode(x); // dua du lieu x vao Node p
		addQNode(q,p);
	}
}


